#!/usr/bin/python

import subprocess
import sys
import os
import shutil
import md5
import copy
from valgrind import DD

def runCmd(cmd, fname, envvars=None):
    """Run CMD, adding ENVVARS to the current environment, and redirecting standard
    and error outputs to FNAME.out and FNAME.err respectively.

    Returns CMD's exit code."""
    if envvars is None: envvars = {}
    with open("%s.out"%fname, "w") as fout, \
         open("%s.err"%fname, "w") as ferr:
        env = copy.deepcopy(os.environ)
        for var in envvars:
            env[var] = envvars[var]
        return subprocess.call(cmd, env=env, stdout=fout, stderr=ferr)

def reference(run, dirname):
    shutil.rmtree(dirname, ignore_errors=True)
    os.mkdir(dirname)
    retval = runCmd([run, dirname],
                    "%s/dd.run"%dirname,
                    {"VERROU_ROUNDING_MODE": "nearest",
                     "VERROU_GEN_SOURCE":    "%s/dd.source"%dirname})
    assert retval == 0, "Error during reference run"

class DDline(DD.DD):
    def __init__(self, run, compare, ref):
        DD.DD.__init__(self)
        self.run_ = run
        self.compare_ = compare
        self.ref_ = ref

    def _test(self, deltas):
        dirname = "dd.source." + md5.new("".join(deltas)).hexdigest()
        shutil.rmtree(dirname, ignore_errors=True)
        os.mkdir(dirname)

        with open(dirname + "/dd.source", "w") as f:
            f.write("__unknown__\t0\n")
            for d in deltas:
                f.write(d)

        for run in xrange(1, 6):
            rundir = dirname + "/dd.run%i" % run
            os.mkdir(rundir)
            runCmd([self.run_, rundir],
                   "%s/dd.run"%rundir,
                   {"VERROU_SOURCE": "%s/dd.source"%dirname})
            retval = runCmd([self.compare_, self.ref_, rundir],
                            "%s/dd.compare"%rundir)
            if retval != 0:
                return self.FAIL
        return self.PASS

def ddLine(run, compare, ref):
    dd = DDline(run, compare, ref)

    with open(ref + "/dd.source", "r") as f:
        deltas = f.readlines()
        c = dd.ddmax(deltas)

    c = [(f, int(l), s) for(f, l, s) in
         [l.strip().split("\t") for l in c]]
    print "ddmax:\n  " + "\n  ".join(["%s:%d(%s)" % e for e in c])

    return c

def main(run, compare):
    ref = "dd.ref"
    reference(run, ref)
    ddLine(run, compare, ref)

if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
