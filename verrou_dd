#!/usr/bin/python -u

import subprocess
import sys
import os
import shutil
#import md5
import hashlib
import copy
from valgrind import DD
import traceback

def failure():
    sys.exit(42)

nbRUN=5
try:
    nbRUN = int(os.environ["VERROU_DD_NRUNS"])
except:
    pass

def runCmd(cmd, fname, envvars=None):
    """Run CMD, adding ENVVARS to the current environment, and redirecting standard
    and error outputs to FNAME.out and FNAME.err respectively.

    Returns CMD's exit code."""
    if envvars is None:
        envvars = {}

    with open("%s.out"%fname, "w") as fout:
        with open("%s.err"%fname, "w") as ferr:
            env = copy.deepcopy(os.environ)
            for var in envvars:
                env[var] = envvars[var]
            return subprocess.call(cmd, env=env, stdout=fout, stderr=ferr)

def prepareOutput(dirname):
    shutil.rmtree(dirname, ignore_errors=True)
    os.makedirs(dirname)

def genExcludeFile(ref, dest, include):
    with open("%s/dd.exclude"%ref, "r") as f:
        excludes = f.readlines()
    with open("%s/dd.include"%dest, "w") as f:
        for d in include:
            excludes.remove(d)
            f.write(d)
    with open("%s/dd.exclude"%dest, "w") as f:
        for line in excludes:
            f.write(line)

def symlink(src, dst):
    if os.path.exists(dst):
        os.remove(dst)
    os.symlink(src, dst)


class DDvr(DD.DD):
    def __init__(self, prefix):
        DD.DD.__init__(self)
        self.cache_outcomes = False
        self.prefix_ = os.getcwd()+"/"+prefix
        self.ref_ = "%s/ref"%self.prefix_

    def testName(self, deltas):
        return self.prefix_ + "/" + hashlib.md5("".join(deltas)).hexdigest()

    def alreadyDone(self, dirname):
        print dirname,
        if os.path.exists(dirname):
            res = os.path.exists("%s/dd.pass"%dirname)
            print " --(cache)-> ",
            if res:
                print "PASS"
                return self.PASS
            else:
                print "FAIL"
                return self.FAIL

        print " --( run )-> ",
        prepareOutput(dirname)
        return None


class DDsym(DDvr):
    def __init__(self, run, compare):
        DDvr.__init__(self, "dd.sym")
        self.run_ = run
        self.compare_ = compare

        self.reference()
        self.checkReference()

    def reference(self):
        dirname = self.ref_
        prepareOutput(dirname)

        retval = runCmd([self.run_, dirname],
                        "%s/dd"%dirname,
                        {"VERROU_ROUNDING_MODE": "nearest",
                         "VERROU_GEN_EXCLUDE":   "%s/dd.exclude"%dirname})
        assert retval == 0, "Error during reference run"

    def checkReference(self):
        retval = runCmd([self.compare_,self.ref_, self.ref_],
                        "%s/checkRef"%self.ref_)
        if retval != 0:
            print "FAILURE: the reference is not valid "
            print "Suggestions:"
            print "\t1) check the correctness of the %s script"%self.compare_
            print "\t2) if your code contains C++ code (libraries included), check the presence of the valgrind option --demangle=no in the run script"

            print "Files to analyze:"
            print "\t run output: " +  "%s/dd.out"%self.ref_ + " %s/dd.err"%self.ref_
            print "\t cmp output: " +  "%s/checkRef.out"%self.ref_ + " %s/checkRef.err"%self.ref_
            failure()


    def deltaFailedMsg(self,delta):
        print "FAILURE: nothing to debug (the run with all symbols activated succeed)"
        print "Suggestions:"
        print "\t1) check the correctness of the %s script : the failure criteria may be too large"%self.compare_
        print "\t2) check if the number of samples VERROU_DD_NRUNS is sufficient "
        print "\t3) if your code contains C++ code (libraries included), check the presence of the valgrind option --demangle=no in the run script"

        dirname = self.testName(delta)
        print "Directory to analyze: %s"%dirname
        failure()

    def allDeltaFailedMsg(self,deltas):
        print "FAILURE: internal error"
        print "Suggestions:"
        print "\t1) check if the number of samples VERROU_DD_NRUNS is sufficient"
        print "\t2) check the correctness of the %s script : the failure criteria may be too large"%self.compare_
        print "\t3) set the env variable VERROU_DD_UNSAFE : be careful it is realy unsafe"

        failure()

        

    def noDeltaSucceedMsg(self,deltas=[]):
        print "FAILURE: the comparison between verrou with activated symbols in nearest mode (ref) and verrou without activated symbols failed"
        
        print "Suggestions:"
        print "\t1) check the libm library is correctly excluded"
        print "\t2) check if reproducibilty discrepancies are larger than the failure criteria of the script %s"%self.compare_

        failure()
        
    def _test(self, deltas):
        dirname = self.testName(deltas)
        done = self.alreadyDone(dirname)
        if done is not None:
            return done

        genExcludeFile(self.ref_, dirname, deltas)

        for run in xrange(1, nbRUN+1):
            rundir = "%s/dd.run%i"%(dirname, run)
            prepareOutput(rundir)

            runCmd([self.run_, rundir],
                   "%s/dd.run"%rundir,
                   {"VERROU_EXCLUDE": "%s/dd.exclude"%dirname})
            retval = runCmd([self.compare_, self.ref_, rundir],
                            "%s/dd.compare"%rundir)
            if retval != 0:
                print "FAIL(%d)" % run
                return self.FAIL

        with open("%s/dd.pass"%dirname, "w") as f:
            f.write("OK\n")

        print "PASS"
        return self.PASS

    def coerce(self, config):
        return "\n  " + "  ".join(config)

    def testSym(self, delta, symlinkconf=None):
        #by default the symlinks are generated when the test fail
        deltas = [delta]
        dirname = self.testName(deltas)
        testResult=self._test(deltas)

        sym = delta.partition("\t")[0]

        if symlinkconf==True or (symlinkconf==None and testResult==self.FAIL):
            linkname = "%s.%s"%(self.prefix_, sym)
            symlink(dirname, linkname)

        if testResult==self.PASS:
            print "WARNING: the symbol " + sym + "do not generate a FAIL" 

        return testResult

def ddSym(run, compare):
    dd = DDsym(run, compare)

    with open("%s/dd.exclude"%dd.ref_, "r") as f:
        deltas = f.readlines()

    conf = dd.ddmax(deltas)
    print "ddmax:" + dd.coerce(conf)

    #for delta in conf:
    #    dd.testSym(delta)
    reducedConf=[delta for delta in conf if dd.testSym(delta)==dd.FAIL]

    return (dd.ref_, reducedConf)


class DDline(DDvr):
    def __init__(self, run, compare, refSym, confSyms):
        DDvr.__init__(self, "dd.line")
        self.run_ = run
        self.compare_ = compare

        prepareOutput(self.ref_)
        genExcludeFile(refSym, self.ref_, confSyms)
        self.reference()

    def reference(self):
        dirname = self.ref_
        retval = runCmd([self.run_, dirname],
                        "%s/dd"%dirname,
                        {"VERROU_ROUNDING_MODE": "nearest",
                         "VERROU_EXCLUDE":       "%s/dd.exclude"%dirname,
                         "VERROU_GEN_SOURCE":    "%s/dd.source"%dirname})
        assert retval == 0, "Error during ddline reference run"

    def _test(self, deltas):
        dirname = self.testName(deltas)
        done = self.alreadyDone(dirname)
        if done is not None:
            return done

        with open("%s/dd.source"%dirname, "w") as f:
            f.write("__unknown__\t0\n")
            for d in deltas:
                f.write(d)

        for run in xrange(1, nbRUN+1):
            rundir = dirname + "/dd.run%i" % run
            os.mkdir(rundir)
            runCmd([self.run_, rundir],
                   "%s/dd.run"%rundir,
                   {"VERROU_SOURCE": "%s/dd.source"%dirname})
            retval = runCmd([self.compare_, self.ref_, rundir],
                            "%s/dd.compare"%rundir)
            if retval != 0:
                print "FAIL(%d)" % run
                return self.FAIL

        with open("%s/dd.pass"%dirname, "w") as f:
            f.write("OK\n")
        print "PASS"
        return self.PASS

    def coerce(self, config):
        return  "\n  " + "\n  ".join(["%s:%d (%s)" % e for e in
                                      [(col[0], int(col[1]), col[2]) for col in
                                       [(l.strip()+"\t\t").split("\t") for l in config]]])

    def testLine(self, delta):
        deltas = [delta]
        dirname = self.testName(deltas)
        self._test(deltas)

        (filename, linenum) = delta.strip().split("\t")[0:2]
        linkname = "%s.%s:%s"%(self.prefix_, filename, linenum)
        symlink(dirname, linkname)

    def noDeltaSucceedMsg(self,deltas=[]):
        raise DDLineError("noDeltaSucceedMsg")

    def deltaFailedMsg(self, deltas=[]):
        raise DDLineError("deltaFailedMsg")

    def allDeltaFailedMsg(self, deltas):
        raise DDLineError("allDeltaFailedMsg")



class DDLineError(Exception):
    """Exception for DDLine Algorithm"""
    def __init__(self,msg):
        self.msg=msg


def ddLine(run, compare, refSym, confSyms):
    dd = DDline(run, compare, refSym, confSyms)

    confLines = []
    for sym in confSyms:
        symname = sym.partition("\t")[0]
        print "ddLine: testing %s"%symname
        deltas = []
        with open(dd.ref_ + "/dd.source", "r") as f:
            for line in f:
                if line.endswith("\t%s\n"%symname):
                    deltas.append(line)

        try: 
            conf = dd.ddmax(deltas)
            confLines += conf
            print "ddmax (%s):"%symname + dd.coerce(conf)

            for delta in conf:
                dd.testLine(delta)

        except DDLineError:
                traceback.print_exc()

    print "ddmax (global):" + dd.coerce(confLines)
    return confLines


def main(run, compare):
    (refSym, confSyms) = ddSym(run, compare)
    ddLine(run, compare, refSym, confSyms)


def usageCmd():
    print "Usage: "+ sys.argv[0] + " runScript cmpScript" 

def checkScriptPath(fpath):
    if os.path.isfile(fpath) and os.access(fpath, os.X_OK):
        return os.path.abspath(fpath)
    else:
        print "Invalid Cmd:"+str(sys.argv)
        print fpath + " should be executable"
        usageCmd()
        failure()


if __name__ == "__main__":

    
    if len(sys.argv)!=3:
        usageCmd()
        failure()

    runScript=checkScriptPath(sys.argv[1])
    cmpScript=checkScriptPath(sys.argv[2])

    main(runScript, cmpScript)
