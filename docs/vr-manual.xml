<?xml version="1.0"?> <!-- -*- sgml -*- -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
          "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<chapter id="vr-manual" xreflabel="Verrou">
  <title>Verrou: a floating-point rounding errors checker</title>

  <para>
    To use this tool, you must specify <option>--tool=verrou</option> on the
    Valgrind command line.
  </para>

  <xi:include href="vr-overview.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="vr-std.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="vr-scope.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />


    <section id="vr-manual.localization" xreflabel="Error localization">
    <title>Error localization</title>
    
    <section id="vr-manual.localization.dd" xreflabel="Delta-Debugging">
      <title>Delta-debugging with the <command>verrou_dd</command> command</title>
      
      <section><title>Synopsis</title>
        <cmdsynopsis>
          <command>verrou_dd</command>    
          <arg choice="req"><replaceable>RUN_SCRIPT</replaceable></arg>
          <arg choice="req"><replaceable>CMP_SCRIPT</replaceable></arg>
        </cmdsynopsis>
      </section>
      
      <section><title>Description</title>
        
        <para>
          Arguments passed to <command>verrou_dd</command> are scripts, which
          must be identified by an absolute path. These scripts will be called
          during the delta-debugging process to automate the tasks of running
          your program under Verrou, and verifying the results. The scripts will
          be called with the following arguments:

          <variablelist>
            <varlistentry>
              <term><command>RUN_SCRIPT</command> [<varname>dir</varname>]</term>
              <listitem><para> Should run your program under Verrou, and put the
                  results somewhere under the <varname>dir</varname> directory.
              </para></listitem>
            </varlistentry>
            <varlistentry>
              <term><command>CMP_SCRIPT</command>
                [<varname>ref_dir</varname>]
                [<varname>run_dir</varname>]</term>
              <listitem><para> Should check whether program results
                  in <varname>run_dir</varname> (as stored by a previous call
                  to <command>RUN_SCRIPT</command>) are "valid". The precise
                  meaning of "valid" is left for the user to determine,
                  depending on the program being analyzed. If a comparison to
                  reference results is needed,
                  directory <varname>ref_dir</varname> contains the results
                  produced by an uninstrumented run of the program.
                </para><para>
                  <command>CMP_SCRIPT</command> should return 0 if and only if the
                  results are "valid".
              </para></listitem>
            </varlistentry>
          </variablelist>
        </para>
        
        <para>
          <command>verrou_dd</command> stores many intermediate results within
          the <computeroutput>dd.sym</computeroutput>
          and <computeroutput>dd.line</computeroutput> directories. Synthetic
          results are present in the form of symbolic links named in the
          following way:
          <variablelist>
            <varlistentry>
              <term>dd.sym.<varname>SYMNAME</varname></term>
              <listitem>The presence of such a symbolic link indicates that the
              function associated to symbol <varname>SYMNAME</varname> has been
              detected as unstable. When the <option>--demangle=no</option>
              option was provided in the verrou command line
              in <command>RUN_SCRIPT</command>, <varname>SYMNAME</varname> is in
              mangled form. In this case, the huma-readable name of the function
              can be retrieved using <command>c++filt</command>.</listitem>
            </varlistentry>
            <varlistentry>
              <term>dd.sym.<varname>FILENAME</varname>:<varname>LINENO</varname></term>
              <listitem>
                Such a symbolic link indicated that an instability was found in
                line <varname>LINENO</varname> of
                file <varname>FILENAME</varname>.
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
      </section>

      <section>
        <title>Environment Variables</title>

        <variablelist>
          <varlistentry>
            <term>
              <computeroutput>VERROU_DD_NRUNS</computeroutput>
            </term>
            <listitem>
              <para>An integer setting the required number successful runs
                needed to consider a configuration as stable. If this
                environment variable is not set, the default value is 5.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>
              <computeroutput>VERROU_DD_UNSAFE</computeroutput>
            </term>
            <listitem>
              <para>If this variable is set (whatever its value), some
                Delta-Debugging assertions are transformed in mere
                warnings. This allows getting a result faster, at the price of
                said result being potentially incorrect (functions/lines listed
                as stable when they are not, or vice versa).
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>

  
  <section id="vr-manual.advanced" xreflabel="Advanced features">
    <title>Advanced features</title>

    <section id="vr-manual.feat.deterministic" xreflabel="Deterministic sections">
      <title>Deterministic sections</title>
      <para>
        Sometimes you want a part of your program to be instrumented and perturbed by
        rounding-mode switches, but you don't want to lose determinism. For example, in
        the following program, <function>det</function> is called twice with the same
        arguments, and the correct execution relies on the strong hypothesis that both
        calls will return the same result.
      </para>

      <programlisting>
float det (float x) {
  return 2*x;
}

int main () {
  float x1 = det (42);
  float x2 = det (42);
  assert (x1 == x2);
} </programlisting>

      <para>
        In this situation, you know that <function>det</function> can contain
        floating-point errors, which you want to quantify. However, you also know that
        whatever these errors, <function>det</function> will remain deterministic and
        the assertion only fails due to the instrumentation added by
        Verrou. The <computeroutput><xref linkend="vr-cr.start-deterministic"/></computeroutput>
        client request can help dealing with such problems.
      </para>

      <para>
        At the beginning of a deterministic section, the pseudo-random number generator
        (pRNG) used for random rounding mode switching is seeded with a new value. This
        value is computed deterministically from the location in the program source
        code. This ensures that each time the instrumented program enters the same
        deterministic section (same location in the source code), the pRNG is seeded
        with the same value, leading to the same sequence of rounding mode switches. The
        seed value also depends on the PID of the current process, so that different
        program executions lead to different results.
      </para>

      <section>
        <title>Basic usage</title>

        <para>
          Use the <computeroutput>VERROU_START_DETERMINISTIC(0)</computeroutput> client
          request to mark the beginning of a deterministic section. Similarly, put
          a <computeroutput>VERROU_STOP_DETERMINISTIC(0)</computeroutput> client request
          at the end of the deterministic section to go back to (pseudo-)random rounding
          mode switching.
        </para>

        <para>
          Here is an example instrumented program:
          <programlisting>
#include &lt;valgrind/verrou.h&gt;

float det (float x) {
  VERROU_START_DETERMINISTIC(0);
  float result = 2*x;
  VERROU_STOP_DETERMINISTIC(0);
  return result;
}

int main () {
  float x1 = det (42);
  float x2 = det (42);
  assert (x1 == x2);
} </programlisting>
          whose execution yields the following output:
          <screen>
--8523-- Entering deterministic section 70660: det() (deterministic.c:4)
--8523-- Leaving deterministic section: det() (deterministic.c:6)
--8523-- Entering deterministic section 70660: det() (deterministic.c:4)
--8523-- Leaving deterministic section: det() (deterministic.c:6) </screen>

          Here we can see that both calls to the <function>det()</function> functions used
          the same value to seed the pRNG (based on the client request location in the
          source).
        </para>
      </section>

      <section>
        <title>Advanced usage</title>

        <para>
          Assume the following program, in which two distinct deterministic sections are
          instrumented, but the client requests have been abstracted out in separate
          function calls (this is actually required for example for Fortran programs,
          which have to call a C function to issue client requests):

          <programlisting>
#include &lt;valgrind/verrou.h&gt;

void verrou_startDeterministic() {
  VERROU_START_DETERMINISTIC(0);
}

void verrou_stopDeterministic() {
  VERROU_STOP_DETERMINISTIC(0);
}

float det1 () {
  verrou_startDeterministic();
  /* ... */
  verrou_stopDeterministic();
}

float det2 () {
  verrou_startDeterministic();
  /* ... */
  verrou_stopDeterministic();
}

int main () {
  fprintf (stderr, "   det1\n");
  assert (det1() == det1());

  fprintf (stderr, "   det2\n");
  assert (det2() == det2());
} </programlisting>

          Executing this program in Verrou yields the following output:
          <screen>
det1
--2909-- Entering deterministic section 82435: verrou_startDeterministic() (deterministic2.c:4)
--2909-- Leaving deterministic section: verrou_stopDeterministic() (deterministic2.c:8)
--2909-- Entering deterministic section 82435: verrou_startDeterministic() (deterministic2.c:4)
--2909-- Leaving deterministic section: verrou_stopDeterministic() (deterministic2.c:8)
det2
--2909-- Entering deterministic section 82435: verrou_startDeterministic() (deterministic2.c:4)
--2909-- Leaving deterministic section: verrou_stopDeterministic() (deterministic2.c:8)
--2909-- Entering deterministic section 82435: verrou_startDeterministic() (deterministic2.c:4)
--2909-- Leaving deterministic section: verrou_stopDeterministic() (deterministic2.c:8) </screen>
          since the client requests are always issued from the same source location, the
          two deterministic sections are seeded with the same value.
        </para>

        <para>
          It is possible to give
          the <computeroutput>VERROU_START_DETERMINISTIC</computeroutput> a non-0 LEVEL
          argument to look at the source location of a calling function in the stack. In
          the case described above, replacing
          the <function>verrou_startDeterminisic</function>
          and <function>verrou_stopDeterministic</function> function definitions like
          this:
          <programlisting>
void verrou_startDeterministic() {
  VERROU_START_DETERMINISTIC(1);
}

void verrou_stopDeterministic() {
  VERROU_STOP_DETERMINISTIC(1);
} </programlisting>
          yields the following output:
          <screen>
det1
--4523-- Entering deterministic section 14298: det1() (deterministic2.c:12)
--4523-- Leaving deterministic section: det1() (deterministic2.c:14)
--4523-- Entering deterministic section 14298: det1() (deterministic2.c:12)
--4523-- Leaving deterministic section: det1() (deterministic2.c:14)
det2
--4523-- Entering deterministic section 65473: det() (deterministic2.c:18)
--4523-- Leaving deterministic section: det2() (deterministic2.c:20)
--4523-- Entering deterministic section 65473: det() (deterministic2.c:18)
--4523-- Leaving deterministic section: det2() (deterministic2.c:20) </screen>
          in which the pRNG is seeded using source locations one level up the stack from
          the client request.
        </para>
        <para>
          Since the source location is not needed to go back to (pseudo-)random rounding
          mode switching, the LEVEL argument
          to <computeroutput>VERROU_STOP_DETERMINISTIC</computeroutput> is only used for
          cosmetic and debug purposes.
        </para>
      </section>
    </section>
  </section>

  <section id="vr-manual.reference" xreflabel="Reference">
    <title>Reference</title>
    <section id="vr-manual.clo" xreflabel="Command-line options">
      <title>Command-line options</title>

      <section>
        <title>General options</title>
        <variablelist id="vr.opts.general.list">

          <varlistentry id="vr-opt.verbose" xreflabel="--vr-verbose">
            <term><option><![CDATA[--vr-verbose=<yes|no> [default=no]]]></option></term>
            <listitem><para>Toggle verbosity: prints messages for x387
                instructions and client requests.
            </para></listitem>
          </varlistentry>

          <varlistentry id="vr-opt.count-op" xreflabel="--count-op">
            <term><option><![CDATA[--count-op=<yes|no> [default=yes]]]></option></term>
            <listitem><para>
                Toggle <link linkend="vr-manual.feat.count">floating-point
                  operations counting</link>.
            </para></listitem>
          </varlistentry>

        </variablelist>
      </section>

      <section>
        <title>Perturbation of floating-point operations</title>
        <variablelist id="vr.opts.instr.list">

          <varlistentry id="vr-opt.rounding-mode" xreflabel="--rounding-mode">
            <term><option><![CDATA[--rounding-mode=<random|average> [default=nearest]]]></option></term>
            <listitem>
              <para>Choose between the <command>random</command>
                and <command>average</command> strategies for randomly
                switching <link linkend="vr-manual.feat.rounding-mode">rounding
                modes</link> for each floating-point operation.</para>
              <para>If this option is not provided, Verrou always rounds to the
                nearest floating-point.</para>
              <para>For debugging purposes, the other IEEE-754 standard rounding modes are
                available: <command>upward</command>, <command>downward</command>
                and <command>toward_zero</command></para>
            </listitem>
          </varlistentry>

          <varlistentry id="vr-opt.instr" xreflabel="--vr-instr-">
            <term><option><![CDATA[--vr-instr=<add|sub|mul|div|mAdd|mSub> [default=all]]]></option></term>
            <listitem>
              <para>Toggle instrumentation of floating-point additions,
                subtractions, multiplications, divisions, fused multiply
                additions, fused multiply subtractions respectively. This option
                can be set multiple times to instrument multiple types of
                operations.</para>
              <para>If this option is not provided, all supported operations
              types are instrumented.</para>
            </listitem>
          </varlistentry>

          <varlistentry id="vr-opt.instr-scalar" xreflabel="--vr-instr-scalar-">
            <term><option><![CDATA[--vr-instr-scalar=<yes|no> [default=no]]]></option></term>
            <listitem><para>
                Toggle instrumentation of x387 scalar instructions.
            </para></listitem>
          </varlistentry>

        </variablelist>
      </section>

      <section>
        <title>Restriction of instrumentation scope</title>
        <variablelist id="vr.opts.scope.list">

          <varlistentry id="vr-opt.instr-atstart" xreflabel="--instr-atstart">
            <term><option><![CDATA[--instr-atstart=<yes|no> [default=yes]]]></option></term>
            <listitem><para>Toggle <link linkend="vr-manual.feat.instr">instrumentation
                  state</link> on or off at program start. Useful in combination
                  with <link linkend="vr-cr.start-instrumentation">client
                  requests</link>.
            </para></listitem>
          </varlistentry>

          <varlistentry id="vr-opt.exclude" xreflabel="--exclude">
            <term><option><![CDATA[--exclude=FILE]]></option></term>
            <listitem><para>Symbols listed
                in <computeroutput>FILE</computeroutput> will be
                left <link linkend="vr-manual.feat.exclude">uninstrumented</link>.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry id="vr-opt.gen-exclude" xreflabel="--gen-exclude">
            <term><option><![CDATA[--gen-exclude=FILE]]></option></term>
            <listitem>
              <para>Generate in <computeroutput>FILE</computeroutput> a list of
                all symbols encountered during program execution. This is useful
                to build an <link linkend="vr-manual.feat.exclude">exclusion
                list</link>.</para>
              <para>In combination
              with <option><xref linkend="vr-opt.exclude"/></option>, only list
              symbols which were not already present in the provided exclusion
              list.</para>
              <para>
                WARNING: in order to generate a correct list, the whole binary
                (including symbols listed in the list provided
                using <option><xref linkend="vr-opt.exclude"/></option>) must be
                instrumented. When using
                both <option><xref linkend="vr-opt.gen-exclude"/></option>
                and <option><xref linkend="vr-opt.exclude"/></option>, it is
                advised to avoid perturbating rounding-modes
                using <option><xref linkend="vr-opt.rounding-mode"/><![CDATA[=nearest]]></option>.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry id="vr-opt.gen-above" xreflabel="--gen-above">
            <term><option><![CDATA[--gen-above=SYMNAME [default=main]]]></option></term>
            <listitem>
              <para>When generating the list of encountered symbols, only
              consider those that are
              above <computeroutput>SYMNAME</computeroutput> (i.e. which are
              encountered in a call stack in
              which <computeroutput>SYMNAME</computeroutput> appears). For
              example, <option><![CDATA[--gen-above=Py_Main]]></option> is
              useful to analyse Python programs.</para>
              <para>As a special case,
              if <computeroutput>SYMNAME</computeroutput> is left blank, output
              all encountered symbols, regardless of their position in the call
              tree.</para>
            </listitem>
          </varlistentry>

          <varlistentry id="vr-opt.source" xreflabel="--source">
            <term><option><![CDATA[--source=FILE]]></option></term>
            <listitem><para>When this option is present, only instructions
                coming from <link linkend="vr-manual.feat.source">source code
                lines</link> listed in <computeroutput>FILE</computeroutput>
                are instrumented.</para></listitem>
          </varlistentry>

          <varlistentry id="vr-opt.gen-source" xreflabel="--gen-source">
            <term><option><![CDATA[--gen-source=FILE]]></option></term>
            <listitem>
              <para>Generate in <computeroutput>FILE</computeroutput> the list
                of all <link linkend="vr-manual.feat.source">source code
                  lines</link> encountered during program execution.</para>
              <para>In combination with
                <option><xref linkend="vr-opt.source"/></option>, only list
                source code lines which were not already present in the provided
                list.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section id="vr-manual.client-requests" xreflabel="Verrou specific client requests">
      <title>Client requests</title>

      <para>Verrou provides the
        following <link linkend="manual-core-adv.clientreq">client
        requests</link> in the <filename>valgrind/verrou.h</filename>
        header.
      </para>

      <variablelist>

        <varlistentry id="vr-cr.display-counters"
                      xreflabel="VERROU_DISPLAY_COUNTERS">
          <term><computeroutput>VERROU_DISPLAY_COUNTERS</computeroutput></term>
          <listitem><para>Display the
              current <link linkend="vr-manual.feat.count">instructions
              counters</link>.</para></listitem>
        </varlistentry>

        <varlistentry id="vr-cr.start-instrumentation"
                      xreflabel="VERROU_START_INSTRUMENTATION">
          <term><computeroutput>VERROU_START_INSTRUMENTATION</computeroutput></term>
          <listitem><para>Start full
              Verrou <link linkend="vr-manual.feat.instr">instrumentation</link>
              (including rounding mode switching) if not already
              enabled.</para></listitem>
        </varlistentry>

        <varlistentry id="vr-cr.stop-instrumentation"
                      xreflabel="VERROU_STOP_INSTRUMENTATION">
          <term><computeroutput>VERROU_STOP_INSTRUMENTATION</computeroutput></term>
          <listitem><para>Stop full
              Verrou <link linkend="vr-manual.feat.instr">instrumentation</link>
              (don't switch rounding modes) if not already disabled.</para></listitem>
        </varlistentry>

        <varlistentry id="vr-cr.start-deterministic"
                      xreflabel="VERROU_START_DETERMINISTIC(LEVEL)">
          <term><computeroutput>VERROU_START_DETERMINISTIC(LEVEL)</computeroutput></term>
          <listitem><para>Start
              a <link linkend="vr-manual.feat.deterministic">deterministic
              section</link>, i.e. one in which floating point operations are
              perturbed, but in a deterministic way.</para></listitem>
        </varlistentry>

        <varlistentry id="vr-cr.stop-deterministic"
                      xreflabel="VERROU_STOP_DETERMINISTIC(LEVEL)">
          <term><computeroutput>VERROU_STOP_DETERMINISTIC(LEVEL)</computeroutput></term>
          <listitem><para>Stop
              a <link linkend="vr-manual.feat.deterministic">deterministic
              section</link>, i.e. resume rounding mode switching in a
              (pseudo-)random way.</para></listitem>
        </varlistentry>

      </variablelist>
    </section>

    <section>
      <title>Monitor commands</title>

      See <xref linkend="manual-core-adv.gdbserver"/> to get more information
      about the Valgrind gdbserver and monitor commands. Below is a list of
      specific monitor commands provided by Verrou:
      <variablelist>
        <varlistentry id="vr.monitor_count" xreflabel="count">
          <term><computeroutput>count</computeroutput></term>
          <listitem><para>Display the
              current <link linkend="vr-manual.feat.count">instructions
                counters</link>.
          </para></listitem>
        </varlistentry>
        <varlistentry id="vr.monitor_instrumentation" xreflabel="instrumentation">
          <term><computeroutput>instrumentation [on|off]</computeroutput></term>
          <listitem><para> Set the
              current <link linkend="vr-manual.feat.instr">instrumentation
              state</link> (or print it if
              no <computeroutput>on</computeroutput>
              / <computeroutput>off</computeroutput> parameter is given).
          </para></listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</chapter>
